array = [1,2,3,4,5]

def func():
  array.append(6)
  print(array)

func()
# 글로벌하게 참조가능

def func1():
  array = [3,4,5]
  array.append(6)
  print(array)

func1()

print((lambda a,b : a+b)(3,7))
# print(add(3,7)) 과 같음



# 람다함수 사용 예시
array = [('홍길동', 50), ('이순신',32),('아무개',74)]

def my_key(x):
  return x[1]

print(sorted(array,key=my_key))
print(sorted(array, key=lambda x: x[1]))
# sorted : key를 기준으로 array 정렬

# 두번째 예시
list1 = [1,2,3,4,5]
list2 = [6,7,8,9,10]

result = map(lambda a,b:a+b, list1, list2)
# map : 첫번째에 함수가 오고, 그 이후에 반복가능한 자료형(튜플, 리스트)의 인자(argument)가 옴. 반복문 안쓸 수 있음.ㅠ 

print(list(result))



# 실전에서 유용한 표준 라이브러리
# 1. 내장함수
# 2. intertools : 반복되는 데이터 처리. 완전 탐색 문제에서 순열과 조합 라이브러리 자주쓰임. 모든 경우의수 고려할 때 자주 쓰임. 
# 3. heapq : 힙(Heap) 자료구조 제공. 우선순위 큐 기능 구현. 최단 경로 알고리즘.
# 4. bisect : 이진 탐색
# 5. collections : 덱, 카운터 등의 자료구조.
# 6. math : 필수적인 수학적 기능

# sum()
result = sum([1,2])
print(result)

# min(), max() : list에 넣어도되고 안넣고 나열해도 됨
min_result = min([3,2,5,6])
print(min_result)

# eval() : 사람입장에서 쓰인 계산식
result = eval("(3+5)*7")
print(result)

# sorted()
result = sorted([9,1,8,5,4])
reverse_result = sorted([9,1,8,5,4], reverse = True)
print(result)

# sorted() with key
array = [('홍길동',35),('이순신',75),('아무개',50)]
result = sorted(array, key = lambda x: x[1], reverse=True)
print(result)

# 모든 경우의 수를 고려해야 할 때
from itertools import permutations, combinations, product, combinations_with_replacement

data = ['A', 'B', 'C']
result = list(permutations(data,2))
print(result)

result = list(combinations(data,2))
print(result)

# 중복순열
result = list(product(data,repeat=2))
print(result)

# 중복조합
result = list(combinations_with_replacement(data,2))
print(result)


# Counter
from collections import Counter
counter = Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])
# counter 객체를 생성해야함.

print(counter['blue'])
print(counter['green'])
print(dict(counter))

import math

def lcm(a, b):
  return a*b // math.gcd(a,b)

a=21
b=14

print(math.gcd(21,14))
print(lcm(21,14))
